datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

model Email {
    id    String @id @default(cuid())
    email String @unique
}

model Post {
    id      String @id @default(cuid())
    title   String
    excerpt String
    slug    String @unique

    createdAt DateTime @default(now())
    published Boolean  @default(false)
}

model Project {
    id    Int    @id @default(autoincrement())
    name  String
    image String
    link  String
}

model Contact {
    id      String @id @default(cuid())
    name    String
    email   String
    message String

    createdAt DateTime @default(now())
}

model views {
    slug  String @id @db.VarChar(128)
    count BigInt @default(1)
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
    ADMIN
    USER
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    role Role? @default(USER)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
